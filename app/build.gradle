import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

configurations {
    devreleaseImplementation
}

dependencies {
    implementation project (':cats')
    implementation project (':relay')

    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // these two are required for logging within the relay module. todo remove?
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'com.noveogroup.android:android-logger:1.3.6'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0' // For @Nullable/@NonNull
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'  // preference fragment & al
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0' // styling for the fragment

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'org.yaml:snakeyaml:1.27:android'

    implementation 'org.aspectj:aspectjrt:1.9.6'

    implementation "commons-codec:commons-codec:1.14"
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.64'

    // needed for thread-safe date formatting as SimpleDateFormat isn't thread-safe
    // the alternatives, including apache commons and threetenabp, seem to be much slower
    // todo perhaps replace with core library desugaring, if it's fast
    implementation 'net.danlew:android.joda:2.10.6'

    implementation 'org.greenrobot:eventbus:3.2.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        versionCode 1200
        versionName "1.2"

        minSdkVersion 21
        targetSdkVersion 29
        buildConfigField "String", "VERSION_BANNER", "\"" + versionBanner() + "\""

        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString(),
                              "room.incremental": "true"]
            }
        }

        kotlinOptions {
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            jvmTarget = '1.8'
        }
    }

    signingConfigs {
        releasePlayConfig
        devPlayConfig
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }

        // These are the real releases in the Google Play Store
        release {
            signingConfig signingConfigs.releasePlayConfig
            minifyEnabled true
            proguardFile file('proguard-rules.pro')
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile file('../cats/proguard-rules.pro')
        }

        // Development releases in the Google Play Store(signed same as the cloudbees site)
        devrelease {
            initWith release
            signingConfig signingConfigs.devPlayConfig
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// Load properties from the user's local gradle.properties file(for both release and "dev" release builds)
if (project.hasProperty('devStorefile') &&
    project.hasProperty('devStorePassword') &&
    project.hasProperty('devKeyAlias') &&
    project.hasProperty('devKeyPassword')) {
    android.signingConfigs.devPlayConfig.storeFile = file(devStorefile)
    android.signingConfigs.devPlayConfig.storePassword = devStorePassword
    android.signingConfigs.devPlayConfig.keyAlias = devKeyAlias
    android.signingConfigs.devPlayConfig.keyPassword = devKeyPassword
} else {
    project.logger.warn('WARN: Set the values devStorefile, devStorePassword, devKeyAlias, and devKeyPassword in ~/.gradle/gradle.properties to sign the release.')
    android.buildTypes.devrelease.signingConfig = null
}

if (project.hasProperty('releaseStorefile') &&
    project.hasProperty('releaseStorePassword') &&
    project.hasProperty('releaseKeyAlias') &&
    project.hasProperty('releaseKeyPassword')) {
    android.signingConfigs.releasePlayConfig.storeFile = file(releaseStorefile)
    android.signingConfigs.releasePlayConfig.storePassword = releaseStorePassword
    android.signingConfigs.releasePlayConfig.keyAlias = releaseKeyAlias
    android.signingConfigs.releasePlayConfig.keyPassword = releaseKeyPassword
} else {
    project.logger.warn('WARN: Set the values releaseStorefile, releaseStorePassword, releaseKeyAlias, and releaseKeyPassword in ~/.gradle/gradle.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}


static String versionBanner() {
    return 'git describe --long'.execute().text.trim()
}


// the problem with weaving Kotlin and Java is that:
//   * Java is compiled by task compileDebugJavaWithJavac
//   * gradle can run either one of these tasks, or both of them
//   * compileDebugJavaWithJavac depends on compileDebugKotlin
//   * weaving Kotlin requires Java classes
//
// this is an attempt to resolve this by postponing weaving until after task
// compileDebugJavaWithJavac has run. gradle.taskGraph.afterTask seems to be executed
// regardless of whether or not the task has been actually run

// the downside here is the the classes are modified in place, and so both compilation tasks
// have to be re-run on every assemble

def weaveCats(String classPath, String aspectPath, String inputOutput) {
    String[] args = [
            "-showWeaveInfo",
            "-1.8",
            "-inpath", inputOutput,
            "-aspectpath", aspectPath,
            "-d", inputOutput,
            "-classpath", classPath,
            "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
    ]

    MessageHandler handler = new MessageHandler(true)
    new Main().run(args, handler)

    def log = project.logger
    for (IMessage message : handler.getMessages(null, true)) {
        switch (message.getKind()) {
            case IMessage.ABORT:
            case IMessage.ERROR:
            case IMessage.FAIL:
                log.error "ERROR: " + message.message, message.thrown
                break
            case IMessage.WARNING:
                log.warn "WARN: " + message.message, message.thrown
                break
            case IMessage.INFO:
                log.info "INFO: " + message.message, message.thrown
                break
            case IMessage.DEBUG:
                log.info "DEBUG " + message.message, message.thrown
                break
        }
    }
}

ext.javaPath = null
ext.kotlinPath = null
ext.classPath = null

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    if (name == "compileDebugKotlin") {
        doLast {
            println "scheduling kotlin weaving..."
            kotlinPath = destinationDir.toString()
            classPath = classpath.asPath
        }
    }
}

tasks.withType(JavaCompile) {
    if (name == "compileDebugJavaWithJavac") {
        doLast {
            println "scheduling java weaving..."
            javaPath = destinationDir.toString()
            classPath = classpath.asPath
        }
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name == "compileDebugJavaWithJavac" && !state.failure) {
        if (kotlinPath) {
            println "weaving cats into the kotlin part of the app..."
            if (!javaPath) javaPath = project.buildDir.path + "/intermediates/javac/debug/classes"
            weaveCats(classPath + File.pathSeparator + javaPath, classPath, kotlinPath)
        }
        if (javaPath) {
            println "weaving cats into the java part of the app..."
            weaveCats(classPath, classPath, javaPath)
        }
    }
}
